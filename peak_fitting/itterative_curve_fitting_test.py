
import time
import matplotlib.pyplot as plt
import numpy as np

from peak_fitting.itterative_curve_fitting import fit_curves_to_data,save_data_to_csv
from data_loading.data_grid_TiNiSn import DataGrid, DataGrid_TiNiSn_500C, DataGrid_TiNiSn_600C
dataGrid = DataGrid_TiNiSn_500C()
#81 is concerning
#151 is bad

#27
times = []
for loc in range(64,dataGrid.size,1):
    print(loc)
    ts = time.time()

    X = dataGrid.data_at_loc(loc)[:,0]
    Y = dataGrid.data_at_loc(loc)[:,1]
    #plt.plot(X,Y)
    #plt.show()

    dict = fit_curves_to_data(X,Y,1.5,1.81,noise=5)
    times.append(time.time() - ts)
    save_data_to_csv("/home/sasha/Desktop/itterative_curve_fitting_save_test/params_" + str(loc) + ".csv",dict)

    param_list = dict['curve_params']
    change_points = dict['change_points']
    residuals = dict['residuals']
    voigt = dict['profile']
    block_curves = dict['block curves']
    block_fits = dict['block fits']
    fit = dict['fit']

    # plot blocks
    [plt.axvline(X[c],color="red") for c in change_points]

    #block block curves
    plt.plot(X,Y,color="black")

    #plot curves in each block
    for block_curve in block_curves:
        plt.plot(*block_curve,color="orange")


    #plot block residuals
    combined_resid = 0
    for resid in residuals:
        combined_resid += np.sum(np.abs(resid[1]))
        plt.plot(*resid,color="green")
    print("Integrated Residual: ", combined_resid)

    #plot fit for each block
    for block_fit in block_fits:
        plt.plot(*block_fit,color="blue")

    #plot fit curve
    #(different from combined block fits at change points)
    #plt.plot(X,[fit(x) for x in X],color="red")

    #plot peak points
    for params in param_list:
        lim = .05
        #if params[2] < lim and params[3] < lim:
        x = params[1]
        y = fit(x)
        plt.plot([x],[y],'ro')

    plt.title(str(loc))
    plt.savefig("/home/sasha/Desktop/itterative_curve_fitting_save_test/plot_" + str(loc) + ".png")
    #plt.draw()
    plt.show()
    #plt.pause(.01)
    #plt.cla()
    sum = 0
    for t in times:
        sum += t
    print("average run time: ",(sum / len(times)))


print(times)
#data from a single run
times = [7.583844184875488, 16.850385427474976, 10.30891728401184, 22.397834300994873, 23.228440523147583, 10.717468976974487, 39.989713191986084, 12.291399002075195, 12.167339563369751, 16.747196912765503, 7.403212070465088, 11.269596576690674, 22.05710768699646, 4.925192594528198, 3.584439277648926, 5.666437387466431, 2.5715456008911133, 7.933652400970459, 6.284832239151001, 17.14151430130005, 10.514729976654053, 8.315244674682617, 4.06892728805542, 9.714330911636353, 40.561705350875854, 8.554270029067993, 2.841304302215576, 5.823434114456177, 4.685538053512573, 5.789384126663208, 6.581615686416626, 11.994231700897217, 11.07219672203064, 4.426408767700195, 8.92012882232666, 5.552929639816284, 17.408002376556396, 24.307193756103516, 4.030233383178711, 12.721673011779785, 10.473581790924072, 12.599799394607544, 3.724074602127075, 6.147611856460571, 3.7703778743743896, 9.003241300582886, 16.908116817474365, 15.99364948272705, 6.296445846557617, 8.95403265953064, 2.2644131183624268, 5.690853595733643, 8.488597393035889, 21.029699087142944, 8.794215679168701, 4.1875159740448, 3.308964490890503, 7.887532949447632, 6.921219110488892, 6.9564759731292725, 36.54994487762451, 13.761362314224243, 3.8085131645202637, 1683.4984402656555, 3.6959617137908936, 7.147105693817139, 3.2139997482299805, 5.2987072467803955, 3.132718324661255, 5.689413547515869, 6.188502073287964, 6.7916882038116455, 7.069649696350098, 2.5031886100769043, 8.363752841949463, 6.311293840408325, 5.474255800247192, 4.46191668510437, 1.6734302043914795, 11.10849642753601, 3.7353413105010986, 2.2665839195251465, 6.235914707183838, 3.683783531188965, 3.1008870601654053, 3.3915493488311768, 4.691755294799805, 27.665202856063843, 1.7288572788238525, 2.1642322540283203, 2.7919187545776367, 10.09328293800354, 7.003746032714844, 2.306889772415161, 2.1260054111480713, 2.3119828701019287, 6.080028772354126, 6.9358367919921875, 7.3454577922821045, 6.08697772026062, 6.329248666763306, 97.58389186859131, 2.3502166271209717, 1.1844758987426758, 2.0301172733306885, 5.674582004547119, 4.15282130241394, 2.197843074798584, 6.567156553268433, 3.781604528427124, 1.045236587524414, 29.270272731781006, 16.024816036224365, 10.954017162322998, 45.404531955718994, 8.655513286590576, 3.0412256717681885, 1.4124510288238525, 1.4137921333312988, 1.3061187267303467, 3.8606386184692383, 3.4594056606292725, 12.06490159034729, 10.5016610622406, 3.059812307357788, 5.33223032951355, 18.64765429496765, 67.32638096809387, 26.4086012840271, 5.407710790634155, 9.13418459892273, 1.4283411502838135, 1.2315523624420166, 1.239168643951416, 3.5451719760894775, 2.2886147499084473, 13.988866090774536, 2.097156047821045, 2.1565358638763428, 16.965288162231445, 6.763839960098267, 16.09996247291565, 36.111544132232666, 2.9796135425567627, 1.4847230911254883, 6.957470893859863, 1.8662071228027344, 2.391955852508545, 4.059998273849487, 11.276988506317139, 1.275312900543213, 5.6324450969696045, 10.05803394317627, 36.727933406829834, 3.764735221862793, 3.276601791381836, 1.4281959533691406, 2.216486930847168, 1.608938455581665, 2.880488634109497, 5.599526643753052, 1.2340869903564453, 0.6915898323059082, 6.692782878875732, 3.1411032676696777, 2.2691214084625244, 2.000633955001831, 1.2951221466064453, 3.847944974899292, 2.7381906509399414, 2.544787883758545, 0.5214886665344238, 1.4537239074707031, 1.0250763893127441, 0.6623671054840088, 1.3559346199035645]

plt.plot([t/60 for t in times])
plt.show()


sums = [0]
for t in times:
    sums.append(sums[-1] + t)
plt.plot([s/60 for s in sums])
plt.show()
